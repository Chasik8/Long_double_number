#include "pch.h"
#include "CppUnitTest.h"
#include "../Long_double_number/class_lib/Double.h"
#include "../Long_double_number/class_lib/Double.cpp"
#include "../Long_double_number/method.cpp"
//#include "../Long_double_number/Source.cpp"
//#include <chrono>
using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace Dominus;

namespace Class_arithmetic
{
	TEST_CLASS(Div_lint)
	{
	public:
		void comparison(string ans, lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy * 92 / 100; ++i) {
				if (ans[i] != current_ans[i]) {
					cout << "AA";
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			lint start = clock();
			a /= 3;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
	};
	TEST_CLASS(MOVE_lint)
	{
	public:
		void comparison(string ans, lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy * 92 / 100; ++i) {
				if (ans[i] != current_ans[i]) {
					cout << "AA";
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			lint start = clock();
			a *= 3;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans = "3.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			comparison(ans, a.get_accuracy(), current_ans);
		}
	};
	TEST_CLASS(Div)
	{
	public:
		void comparison(string ans,lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy *92/100; ++i) {
				if (ans[i] != current_ans[i]) {
					cout << "AA";
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);

		}
		TEST_METHOD(T1_2)
		{
			Double a("1", 9, 100, false);
			Double b("2", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T1_2: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T3_2)
		{
			Double a("3", 9, 100, false);
			Double b("2", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T3_2: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7_3)
		{
			Double a("7", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T7_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T1_13)
		{
			Double a("1", 9, 100, false);
			Double b("13", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T1_13: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T2_12)
		{
			Double a("2", 9, 100, false);
			Double b("12", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T2_12: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T13_5)
		{
			Double a("13", 9, 100, false);
			Double b("5", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T13_5: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7000000000_3)
		{
			Double a("7000000000", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T7000000000_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T3_7000000000)
		{
			Double a("3", 9, 100, false);
			Double b("7000000000", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T3_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000", 9, 100, false);
			Double b("7000000001", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans = "0.9999999998571428571632653061195335276972094960432557862795348876743521589036639772994765746715033464754995219320714968668469290190218672829968761024290176996529974714781432183602652545199621064971482705004073899285132300102123957128268006124533141982209551145398635550657337778477523174503210975070969860704147162756550405320492799239929600108581485698774073471603703789770899458604157220199406111400084841228559308395920098800582843028488165281644547816907921740441725465651182076335545417666350654619092763625843890910593729869915181447154974078977860845860305593448527772364496032519357709640091755765701177747756974607463289341790958665458434476363080789090988458701287363042673233851046680878421902731654013895477998014931714569295469347243504378965213660147826619978881911431588298366915957376154863231977876681146017616979140340431551379938349802865950028162007138833998980166571574261918346534011664780855476459877789077160315846119954879125720731553468466920933076154152417692263940329676580";
			comparison(ans, a.get_accuracy(), current_ans);
		}
	};
	TEST_CLASS(MOV)
	{
	public:
		void comparison(string ans,lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy; ++i) {
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a * b;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);

		}
		TEST_METHOD(T1_13)
		{
			Double a("1", 9, 100, false);
			Double b("13", 9, 100, false);
			lint start = clock();
			a = a * b;
			Logger::WriteMessage(("Время выполнения теста T1_13: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7000000000_3)
		{
			Double a("7000000000", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a * b;
			Logger::WriteMessage(("Время выполнения теста T7000000000_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans = "21000000000.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			comparison(ans, a.get_accuracy(), current_ans);
		}
		//TEST_METHOD(T7000000000_7000000001)
		//{
		//	Double a("7000000000");
		//	Double b("7000000001");
		//	lint start = clock();
		//	a = a * b;
		//	Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		//	string ans = a.convert_to_string();
		//	string current_ans
		//	comparison(ans,  a.get_accuracy(), current_ans);
		//}
	};
}
namespace logical_operations {
	TEST_CLASS(MORE)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a > b== false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a > b== true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a > b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
	TEST_CLASS(MORE_EQUALLY)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a >= b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a >= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a >= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
	TEST_CLASS(LESS)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a < b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a < b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a < b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
	TEST_CLASS(LESS_EQUALLY)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a <= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a <= b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a <= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};

	TEST_CLASS(EQUALLY)
	{
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue((a == b) == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a == b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};

	TEST_CLASS(NOT_EQUALLY)
	{
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a != b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a != b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
}

namespace Class_method
{
	TEST_CLASS(PI)
	{
	public:
		const string current_ans = "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198";
		void comparison(string ans,lint accuracy) {
			for (lint i = 0; i < accuracy; ++i) {
				if (ans[i] != current_ans[i]) {
					lint ii = i;
					Logger::WriteMessage(("������ ����� "+to_string(i)).c_str());
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T_16)
		{
			Double a("1", 9, 100, false);
			lint start = clock();
			a = pi_16(9, 100, false);
			Logger::WriteMessage(("Время выполнения теста T_16: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			comparison(ans,a.get_accuracy());
		}
	};
	namespace Convest {
		TEST_CLASS(convert)
		{
		public:
			void comparison(string ans, lint accuracy) {
				string current_ans
				for (lint i = 0; i < accuracy; ++i) {
					if (ans[i] != current_ans[i]) {
						lint ii = i;
						Logger::WriteMessage(("������ ����� " + to_string(i)).c_str());
					}
					Assert::IsTrue(ans[i] == current_ans[i]);
				}
			}
			TEST_METHOD(T_16)
			{
				Double a("16",9, 100, false);
				lint start = clock();
				Logger::WriteMessage(("Время выполнения теста T_16: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
				string ans = a.convert_to_string();
				comparison(ans, a.get_accuracy());
			};
		};
	}
}#include "pch.h"
#include "CppUnitTest.h"
#include "../Long_double_number/class_lib/Double.h"
#include "../Long_double_number/class_lib/Double.cpp"
#include "../Long_double_number/method.cpp"
//#include "../Long_double_number/Source.cpp"
//#include <chrono>
using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace Dominus;

namespace Class_arithmetic
{
	TEST_CLASS(Div_lint)
	{
	public:
		void comparison(string ans, lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy * 92 / 100; ++i) {
				if (ans[i] != current_ans[i]) {
					cout << "AA";
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			lint start = clock();
			a /= 3;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
	};
	TEST_CLASS(MOVE_lint)
	{
	public:
		void comparison(string ans, lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy * 92 / 100; ++i) {
				if (ans[i] != current_ans[i]) {
					cout << "AA";
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			lint start = clock();
			a *= 3;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
	};
	TEST_CLASS(Div)
	{
	public:
		void comparison(string ans,lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy *92/100; ++i) {
				if (ans[i] != current_ans[i]) {
					cout << "AA";
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);

		}
		TEST_METHOD(T1_2)
		{
			Double a("1", 9, 100, false);
			Double b("2", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T1_2: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans = "0.5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T3_2)
		{
			Double a("3", 9, 100, false);
			Double b("2", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T3_2: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7_3)
		{
			Double a("7", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T7_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T1_13)
		{
			Double a("1", 9, 100, false);
			Double b("13", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T1_13: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T2_12)
		{
			Double a("2", 9, 100, false);
			Double b("12", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T2_12: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T13_5)
		{
			Double a("13", 9, 100, false);
			Double b("5", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T13_5: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7000000000_3)
		{
			Double a("7000000000", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T7000000000_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T3_7000000000)
		{
			Double a("3", 9, 100, false);
			Double b("7000000000", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T3_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000", 9, 100, false);
			Double b("7000000001", 9, 100, false);
			lint start = clock();
			a = a / b;
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans = "0.9999999998571428571632653061195335276972094960432557862795348876743521589036639772994765746715033464754995219320714968668469290190218672829968761024290176996529974714781432183602652545199621064971482705004073899285132300102123957128268006124533141982209551145398635550657337778477523174503210975070969860704147162756550405320492799239929600108581485698774073471603703789770899458604157220199406111400084841228559308395920098800582843028488165281644547816907921740441725465651182076335545417666350654619092763625843890910593729869915181447154974078977860845860305593448527772364496032519357709640091755765701177747756974607463289341790958665458434476363080789090988458701287363042673233851046680878421902731654013895477998014931714569295469347243504378965213660147826619978881911431588298366915957376154863231977876681146017616979140340431551379938349802865950028162007138833998980166571574261918346534011664780855476459877789077160315846119954879125720731553468466920933076154152417692263940329676580";
			comparison(ans, a.get_accuracy(), current_ans);
		}
	};
	TEST_CLASS(MOV)
	{
	public:
		void comparison(string ans,lint accuracy, string current_ans) {
			for (lint i = 0; i < (double)accuracy; ++i) {
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T1_3)
		{
			Double a("1", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a * b;
			Logger::WriteMessage(("Время выполнения теста T1_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);

		}
		TEST_METHOD(T1_13)
		{
			Double a("1", 9, 100, false);
			Double b("13", 9, 100, false);
			lint start = clock();
			a = a * b;
			Logger::WriteMessage(("Время выполнения теста T1_13: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans = "13.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			comparison(ans, a.get_accuracy(), current_ans);
		}
		TEST_METHOD(T7000000000_3)
		{
			Double a("7000000000", 9, 100, false);
			Double b("3", 9, 100, false);
			lint start = clock();
			a = a * b;
			Logger::WriteMessage(("Время выполнения теста T7000000000_3: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			string current_ans
			comparison(ans, a.get_accuracy(), current_ans);
		}
		//TEST_METHOD(T7000000000_7000000001)
		//{
		//	Double a("7000000000");
		//	Double b("7000000001");
		//	lint start = clock();
		//	a = a * b;
		//	Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		//	string ans = a.convert_to_string();
		//	string current_ans = "49000000007000000000.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
		//	comparison(ans,  a.get_accuracy(), current_ans);
		//}
	};
}
namespace logical_operations {
	TEST_CLASS(MORE)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a > b== false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a > b== true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a > b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
	TEST_CLASS(MORE_EQUALLY)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a >= b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a >= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a >= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
	TEST_CLASS(LESS)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a < b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a < b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a < b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
	TEST_CLASS(LESS_EQUALLY)
	{
		TEST_METHOD(T7000000000_7000000001)
		{
			Double a("7000000000");
			Double b("7000000001");
			lint start = clock();
			Assert::IsTrue(a <= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000001: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a <= b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a <= b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};

	TEST_CLASS(EQUALLY)
	{
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue((a == b) == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a == b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};

	TEST_CLASS(NOT_EQUALLY)
	{
		TEST_METHOD(T7000000000_700000000)
		{
			Double a("7000000000");
			Double b("700000000");
			lint start = clock();
			Assert::IsTrue(a != b == true);
			Logger::WriteMessage(("Время выполнения теста T7000000000_700000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
		TEST_METHOD(T7000000000_7000000000)
		{
			Double a("7000000000");
			Double b("7000000000");
			lint start = clock();
			Assert::IsTrue(a != b == false);
			Logger::WriteMessage(("Время выполнения теста T7000000000_7000000000: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
		}
	};
}

namespace Class_method
{
	TEST_CLASS(PI)
	{
	public:
		const string current_ans = "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198";
		void comparison(string ans,lint accuracy) {
			for (lint i = 0; i < accuracy; ++i) {
				if (ans[i] != current_ans[i]) {
					lint ii = i;
					Logger::WriteMessage(("������ ����� "+to_string(i)).c_str());
				}
				Assert::IsTrue(ans[i] == current_ans[i]);
			}
		}
		TEST_METHOD(T_16)
		{
			Double a("1", 9, 100, false);
			lint start = clock();
			a = pi_16(9, 100, false);
			Logger::WriteMessage(("Время выполнения теста T_16: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
			string ans = a.convert_to_string();
			comparison(ans,a.get_accuracy());
		}
	};
	namespace Convest {
		TEST_CLASS(convert)
		{
		public:
			void comparison(string ans, lint accuracy) {
				string current_ans
				for (lint i = 0; i < accuracy; ++i) {
					if (ans[i] != current_ans[i]) {
						lint ii = i;
						Logger::WriteMessage(("������ ����� " + to_string(i)).c_str());
					}
					Assert::IsTrue(ans[i] == current_ans[i]);
				}
			}
			TEST_METHOD(T_16)
			{
				Double a("16",9, 100, false);
				lint start = clock();
				Logger::WriteMessage(("Время выполнения теста T_16: " + to_string((double)(clock() - start) / CLOCKS_PER_SEC)).c_str());
				string ans = a.convert_to_string();
				comparison(ans, a.get_accuracy());
			};
		};
	}
}